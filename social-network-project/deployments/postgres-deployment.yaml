# This is a basic PostgreSQL deployment for development/testing.
# For production, consider using a managed PostgreSQL service or a more robust StatefulSet configuration with persistent volumes.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
labels:
  app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine # Using PostgreSQL 15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "socialuser" # Replace with your desired user
        - name: POSTGRES_PASSWORD
          value: "socialpass" # Replace with your desired password - consider using Secrets for production
        - name: POSTGRES_DB
          value: "socialnetworkdb" # Replace with your desired database name
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        emptyDir: {} # For development, data is lost when pod restarts.
        # For persistence, you would configure a PersistentVolumeClaim:
        # persistentVolumeClaim:
        #   claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432 # Port the service is exposed on within the cluster
      targetPort: 5432 # Port the container is listening on
  type: ClusterIP # Only reachable within the cluster
