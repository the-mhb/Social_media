# Nginx configuration for Docker Compose local development

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Define upstreams for your services using Docker Compose service names
    # Docker Compose provides DNS resolution for service names on the user-defined network.

    upstream auth_service_upstream_dev {
        # 'auth_service_dev' is the service name in docker-compose.dev.yml
        # Port is the one EXPOSED by the auth_service_dev container (internal port)
        server auth_service_dev:8080;
    }

    upstream user_service_upstream_dev {
        # 'user_service_dev' is the service name in docker-compose.dev.yml
        # Port is the one EXPOSED by the user_service_dev container (internal port)
        server user_service_dev:8081;
    }

    server {
        listen 80; # Nginx listens on port 80 (exposed to host as port 80 by docker-compose)

        # Route requests for /api/auth/* to auth-service
        location /api/auth/ {
            # Proxies /api/auth/foo to /auth/foo on the upstream
            rewrite ^/api/(.*)$ /$1 break; 
            proxy_pass http://auth_service_upstream_dev;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route requests for /api/users/* to user-service
        location /api/users/ {
            # Proxies /api/users/foo to /users/foo on the upstream
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://user_service_upstream_dev;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location / {
            # Could serve a static page or React app here if Nginx is also serving frontend
            # For now, just a health check or a 404
            return 200 'API Gateway (Dev) is running. Use /api/auth/ or /api/users/';
        }

        location = /health {
            access_log off;
            return 200 "OK";
        }
    }
}
