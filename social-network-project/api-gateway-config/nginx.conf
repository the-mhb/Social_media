# Basic Nginx configuration for API Gateway (for Kubernetes Ingress or standalone Nginx)
# This configuration assumes Nginx is running as a reverse proxy,
# forwarding requests to your services within the Kubernetes cluster.

# worker_processes 1; # Adjust as needed

# events {
#     worker_connections 1024; # Adjust as needed
# }

http {
    # If using this with Kubernetes Ingress, much of this will be handled by the Ingress controller.
    # This is a more complete example if Nginx itself is the gateway.

    # Define upstreams for your services (using Kubernetes service DNS names)
    upstream auth_service_upstream {
        # Replace 'auth-service' with the actual name of your Kubernetes service for auth-service
        # The port should be the port defined in the auth-service Kubernetes Service (e.g., 80)
        server auth-service.default.svc.cluster.local:80; # Assuming service is in 'default' namespace
    }

    upstream user_service_upstream {
        # Replace 'user-service' with the actual name of your Kubernetes service for user-service
        # The port should be the port defined in the user-service Kubernetes Service (e.g., 80)
        server user-service.default.svc.cluster.local:80; # Assuming service is in 'default' namespace
    }

    server {
        listen 80; # Nginx listens on port 80
        # server_name yourdomain.com; # Replace with your actual domain if applicable

        # Default location for unmatched paths (optional)
        # location / {
        #     return 404;
        # }

        # Route requests for /api/auth/* to auth-service
        location /api/auth/ {
            # Proxies /api/auth/foo to /auth/foo on the upstream
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://auth_service_upstream;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # WebSocket support (if needed by any auth endpoints, unlikely for typical REST)
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }

        # Route requests for /api/users/* to user-service
        location /api/users/ {
            # Proxies /api/users/foo to /users/foo on the upstream
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://user_service_upstream;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Add more locations for other services as needed
        # location /api/messaging/ {
        #     rewrite ^/api/messaging/(.*)$ /$1 break;
        #     proxy_pass http://messaging_service_upstream;
        #     ...
        # }

        # Health check endpoint (optional)
        location /health {
            access_log off;
            return 200 "OK";
            # Or proxy to a health check endpoint of one of your services
        }
    }
}
